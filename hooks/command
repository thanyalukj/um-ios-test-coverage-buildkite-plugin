#!/usr/bin/env bash
set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

## Source functions.bash based on environment
## local environment = BUILDKITE_BUILD_ID is not set
## Buildkite environment = BUILDKITE_BUILD_ID is set
BUILD_ID=${BUILDKITE_BUILD_ID:-""}
if [ ! $BUILD_ID == "" ]; then
  # shellcheck source=lib/functions.bash
  # shellcheck disable=SC1091
  source "$DIR/../lib/xccov-to-sonarqube-generic.bash"
  source "$DIR/../lib/functions.bash"
fi

## Setup variables from the plugin properties
PLATFORM="${BUILDKITE_PLUGIN_UM_IOS_TEST_COVERAGE_PLATFORM:-undefined}"
WORKSPACE="$BUILDKITE_PLUGIN_UM_IOS_TEST_COVERAGE_WORKSPACE"
SCHEME="$BUILDKITE_PLUGIN_UM_IOS_TEST_COVERAGE_SCHEME"

## Setup variables
SKIP=$(buildkite-agent meta-data get 'skip-test' --default 'true')
SIMULATOR="iPhone 16"
OS_VERSION="18.2"
DESTINATION="platform=iOS Simulator,name=${SIMULATOR},OS=${OS_VERSION}"
BUILD_WRAPPER_OUTPUT_DIR="build_wrapper_output_directory"
SONAR_COVERAGE_FILE="sonarqube-generic-coverage.xml"

# Select Xcode 16.2
sudo xcode-select --switch /Applications/Xcode_16.2.app/Contents/Developer

# run ios unit tests and sonar scanner
function run_ios_unit_tests_and_sonar() {
  echo "--- :test_tube: Running iOS Unit Tests..."

  echo "~~~ Boot a simulator: $DESTINATION"
  boot_simulator "$SIMULATOR"

  echo "~~~ Install iOS dependencies"

  cd ios/library
  rbenv install --skip-existing
  bundle install --quiet

  cd test-harness
  bundle install --quiet
  bundle exec pod install

  echo "~~~ build-wrapper"
  build-wrapper --out-dir $BUILD_WRAPPER_OUTPUT_DIR xcodebuild -workspace $WORKSPACE -scheme $SCHEME -sdk iphonesimulator -destination "$DESTINATION"

  echo "~~~ xcodebuild"
  xcodebuild test -workspace $WORKSPACE -scheme $SCHEME -enableCodeCoverage YES -derivedDataPath build -sdk iphonesimulator -destination "$DESTINATION" build

  echo "~~~ xcov-to-sonar"
  cd ../
  (covert_xcresult_to_generic_xml test-harness/build/Logs/Test/*.xcresult/) >$SONAR_COVERAGE_FILE

  # Run sonar-scanner
  SONAR_PROJECT_KEY=$(prop "sonar.projectKey")
  if ([ -z "$BUILDKITE_PULL_REQUEST" ] || [ "$BUILDKITE_PULL_REQUEST" == "false" ]); then
    echo "~~~ sonar-scanner on branch: ${BUILDKITE_BRANCH}"
    sonar_url="https://sonarcloud.io/dashboard?id=${SONAR_PROJECT_KEY}&branch=${BUILDKITE_BRANCH}"
    sonar-scanner \
      -Dsonar.branch.name="${BUILDKITE_BRANCH}" \
      -Dsonar.cfamily.build-wrapper-output="${BUILD_WRAPPER_OUTPUT_DIR}" \
      -Dsonar.coverageReportPaths="${SONAR_COVERAGE_FILE}" \
      -Dsonar.projectBaseDir=.
  else
    echo "~~~ sonar-scanner on pr: #${BUILDKITE_PULL_REQUEST}"
    sonar_url="https://sonarcloud.io/dashboard?id=${SONAR_PROJECT_KEY}&pullRequest=${BUILDKITE_PULL_REQUEST}"
    sonar-scanner \
      -Dsonar.pullrequest.key="${BUILDKITE_PULL_REQUEST}" \
      -Dsonar.pullrequest.branch="${BUILDKITE_BRANCH}" \
      -Dsonar.pullrequest.base="${BUILDKITE_PULL_REQUEST_BASE_BRANCH}" \
      -Dsonar.cfamily.build-wrapper-output="${BUILD_WRAPPER_OUTPUT_DIR}" \
      -Dsonar.coverageReportPaths="${SONAR_COVERAGE_FILE}" \
      -Dsonar.projectBaseDir=.
  fi

  buildkite-agent annotate \
    --style "info" \
    --context "sonarcloud-url" \
    ":sonarcloud: Analysed __${SONAR_PROJECT_KEY}__ in [Sonarcloud]($sonar_url)"
}

function run_reactnative_ios_unit_tests() {
  echo "--- :test_tube: Running react-native iOS Unit Tests..."

  ## Copy .npmrc files to the correct locations
  cp .npmrc react/library/
  cp .npmrc react/library/test-harness/

  ## Install react-native dependencies
  echo "~~~ Install react-native dependencies"
  cd react/library/
  npm ci
  cd test-harness
  npm ci

  ## Install ios dependencies
  echo "~~~ Install iOS dependencies"
  rbenv install --skip-existing
  bundle install --quiet
  cd ios
  bundle exec pod install

  ## Run ios unit tests
  echo "~~~ xcodebuild"
  xcodebuild -workspace $WORKSPACE -scheme $SCHEME -sdk iphonesimulator -destination "$DESTINATION"
  xcodebuild test -workspace $WORKSPACE -scheme $SCHEME -sdk iphonesimulator -destination "$DESTINATION"
}

######################################################################
# Main script execution
######################################################################
if [[ "$SKIP" == "true" ]]; then
  echo "--- Skipping test as skip-test was set to true"
  exit 0
fi

# Check if the platform is set to contract or library and perform steps accordingly
if [[ "$PLATFORM" == "ios-library" ]]; then
  run_ios_unit_tests_and_sonar
elif [[ "$PLATFORM" == "react-library" ]]; then
  run_reactnative_ios_unit_tests
else
  echo "--- :warning: Platform needs to be one of these: [ios-library, react-library]"
  exit 0
fi
